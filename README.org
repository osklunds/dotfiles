
* dotfiles

dotfiles I use

** Emacs todos

*** Housekeeping

- Switch to lexical binding
- Use ~#'~ instead of ~'~ for fucntion

*** More important

- Upgrade preparation, see [[Upgrade preparation]]
- Download all packages and store as check-in
- for dwim find file, support =git ls-files=, =git grep=, =rg= options (for ignoring ignore), select if =cwd= or =project root=
- for dwim find file, if arg, ask for path
- =wgrep=
- add vim mark to bookmarks

*** Less important

- =evil= in minibuffer
- Change to emacs built-in search and search-and-replace
- Lower memory usage. Garbage collection is slow for me. Even if my config doesn't generate more garbage than more lightweight configs, because so much memory is used, it takes time to find the garbage. My guess at least. *BIG*
      - One suggestion was to decrease shell term size.
- More than one help window, and don't make them disappear so quickly
- Undo each step in search-and-replace, i.e. migrate to emacs' query-replace
- rg options, e.g. ignore gitignore, only certain file types, fold on file, etc
- Make relative line numebrs correct in vdiff
- More colorful dired, like ll
- vim mark, but name them, cycle through with ivy
- when new buffer, ALWAYS switch to it for consistent behavior
- consider change ctrl to meta
- make vdiff auto sync at start work
- make vdiff sync as scroll always be able to scroll

*** org-mode

- Make markdown look as good as org-mode
- understand links
- center inline images
- Yank without emphasis markers
- try export

*** corfu

*** Not important at all

- lsp diagnostics
- cleaner magit transient (BIG)
- alt-ret for continuing list also outside org-mode
- cache modeline segments, like doom modeline

*** Wanted, but hard to do

- Box around the cursorline, like VSCode
- org-mode
      - Slightly bigger bullets
      - Line numbers

* completing-read

I have split my =completing-read= config into =ol-completing-read.el= and several =ol-completing-read-*.el=, the latter having one per framework, so =ol-completing-read-vertico.el= and =ol-completing-read-ivy.el=. The idea is that =ol-completing-read= contains things generic no matter which framework I use, for example

- ~ol-dwim-find-file-name~ for finding a file name using e.g. =rg --files= in either project root or cwd, preferring =ripgrep= if available, otherwise using some fallbacks.
- ~ol-dwim-find-file-content~ for finding file content using =ripgrep= if available, otherwise using some fallbacks.

Then the =ol-completing-read-*.el= files contain configuration for making that particular framework work the way I want it, for example

- Keybindings inside the minibuffer
- Keybindings for functions e.g. =imenu= functionality
- Faces
- Completion styles

=ol-completing-read.el= requires one of the =ol-completing-read-*.el= files. 

Why this complexity? I've used =ivy= for a long time, but wanted to try =vertico= and friends. Eventually I might consider writing my own framework for the reasons below:

- Understand how it works
- Simplicity - I have simple but peculiar needs 
- Ultimate control - because I already tweak the frameworks quite a lot)

My vertico config is not as polished as for ivy. It was hard to get it work the way ivy worked. I might not spend time on it if I'm going to roll my own anyway.

** completing-read-own todos

- UI
- Style
- Sync applications
      - =switch-to-buffer=
            - delete selected candidate
      - =find-file=
            - =TAB= should not exit minibuffer, like in =ivy=
      - =eval-expression=
- Async applications (i.e. grep)
      - Colors based on what =ripgrep= etc output using =--color=always=
      - (Hard, not too important) headings based on =ripgrep='s headings
      - Sometimes there are multilines
- Collection
      - Take initial directory, intial buffer/mode, prefix arg etc into account when rerunning action, like =embark= does
      - Colors based on what =ripgrep= etc output using =--color=always=
      - (Hard, not too important) headings based on =ripgrep='s headings

* Upgrade preparation

To make upgrades of emacs as easy as possible, I want to rely on as few packages as possible, and those I rely on should preferably have a large community and be maintained, so that no backwards compatibility issues appear

To make upgrades of packages as easy as possible, I want to customize the config of packages as little as possible, especially advising on internal functions.

- ~anzu/evil-anzu~ -> own
      - Keep them until upgrade problems, but consider rolling my own
- ~evil-visualstar~ -> own

* "Merge Survival Knife"

** Principles

This tool sets up five different views of the merge conflict according to the figure below.

#+begin_src

         LOCAL
        /  |  \
       /   |   \
      /    |    \
     /     |     \
    /      |      \
BASE       |       MERGED
    \      |      /
     \     |     /
      \    |    /
       \   |   /
        \  |  /
         REMOTE

#+end_src

=LOCAL= is the version in the target branch, "your changes".
=REMOTE= is the version in the branch you're merging in, "others' changes".
=BASE= is the merge base between =LOCAL= and =REMOTE=.
=MERGED= is the merged result.

I use the different diffs the following way:

- =BASE <-> LOCAL= for understanding what changes I have made since the merge base.
- =BASE <-> REMOTE= for understanding what changes other people have made since the merge base.
- =LOCAL <-> REMOTE= if =LOCAL= and =REMOTE= have made very similar changes, I use this to understand the difference between them. Useful if you have manually copy-pasted code from the branch to merge from, but also made a few changes on your own.
- =REMOTE <-> MERGED= for understanding what changes I will "apply" to the branch I'm merging from, if I were to merge my changes to it. For example, if I create a branch based on the main branch, I do a few changes, and main does a few changes, then this diff shows what I would apply to main if I merge to main.
- =LOCAL <-> MERGED= for understanding what changes remote will "apply" to my branch after I merge.

=BASE <-> LOCAL= shows your intention. So that diff should look very similar to =REMOTE <-> MERGED= if you have correctly preserved your intentions after the merge.

Similiarly, =BASE <-> REMOTE= shows others' intentions, so it should look the same as =LOCAL <-> MERGED=.

In other words, I use 

- =BASE <-> LOCAL=
- =BASE <-> REMOTE=
- =LOCAL <-> REMOTE=

for understanding the conflict, and

- =REMOTE <-> MERGED=
- =LOCAL <-> MERGED=

for reviewing my resolution of the conflict.

** How to use it

The tool is based on [[https://github.com/justbur/emacs-vdiff][vdiff]].

| My key  | Command           | Description                                       |
|---------+-------------------+---------------------------------------------------|
| =SPC g m= | =msk-mode-enable=   | Start solving the merge conflict the cursor is in |
| =C-c q=   | =msk-mode-disable=  | Save your resolution of the merge conflict        |
| =M-1=     | =msk-base-local=    | Change diff view to BASE-LOCAL                    |
| =M-2=     | =msk-base-remote=   | Change diff view to BASE-REMOTE                   |
| =M-3=     | =msk-local-remote=  | Change diff view to LOCAL-REMOTE                  |
| =M-4=     | =msk-local-merged=  | Change diff view to LOCAL-MERGED                  |
| =M-5=     | =msk-remote-merged= | Change diff view to REMOTE-MERGED                 |
